"Circuits" language definition
Based on the first syntax document (now located at syntax.old.txt) 

---
Syntax
---

Programs consist of a set of "boxes" connected by "wires."  Each box has
four "interfaces" (North, South, East, West), and each wire connects exactly
two interfaces.  Each box contains exactly one command.  Wires are
either "input" or "output" wires depending on how they are connected
to the box (this is discussed below).  Commands expect to be given
input wires in some places and output wires in others.

The syntax for commands is:

INIFACE ::= N | W

OUTIFACE ::=  S | E

EXPR ::= () | (EXPR, EXPR) | Inl EXPR | Inr EXPR | INIFACE

a LIST ::= [] | [a] | [a, a]

COMMAND ::= send (EXPR, OUTIFACE) LIST
          | case EXPR of OUTIFACE, OUTIFACE
          | split EXPR
          | use s

((split always sends to S, E))

s can be any non-empty string, and represents a module name, as will be
discussed below.

The semantics of the commands are discussed later.

A box looks like this:

*=======*
!COMMAND!
*=======*

All boxes are three lines vertically.  No whitespace is permitted between
the command and the edges of the box.  So
                          *========*
*=========*               !use plus!
! use plus!        and    !        !
*=========*               *========*

are invalid boxes.

The characters along the top and bottom edges are equal signs and the 
characters along the left and right edges are bangs.

Boxes may be connected by wires like this:

*=======*                   *=======*
!COMMAND!------------------>!COMMAND!
*=======*                   *=======*
    |                           |
    |                           v
    |      *=======*        *=======*
    +----->!COMMAND!------->!COMMAND!
           *=======*        *=======*

A box may have at most one wire touching each side.  Wires to the
E and W interfaces must touch the single pipe character on the
appropriate side.  Wires to the N and S interfaces may connect to any of
the dash characters along those sides.

Wires are formed out of dashes and pipes like boxes. A wire has an additional
character, >,v or on exactly one end.  Each wire connects two boxes.
A wire may "turn" by using the plus character, as seen above.

Wires that touch the N and W interfaces of a box must be input wires to
that box and wires that touch the S and E interfaces of a box must be
output wires of that box.

The smallest possible wire is two characters, so the >,v characters
by themselves are not valid wires, but ->, and | are.
                                                v
The special character # may be used to cross over two wires.  So, in
the program:
           *=====*
           !Box 3!
           *=====*
              |
*=====*       |       *=====*
!Box 1!-------#------>!Box 2!
*=====*       |       *=====*
              v
           *=====*
           !Box 4!
           *=====*

The E output of Box 1 may be received as the W input to Box 2, and the
S output of Box 3 may be received as the N input to Box 4.

Modules may be made out of a collection of boxes like this:

 ,....................|......................,
 :module_name         |                      :
 :   *========*       |          *========*  :
 --->!COMMAND1!-------#--------->!COMMAND2!---
 :   *========*       |          *========*  :  
 :       |            |               |      :
 :       |            v               v      :
 :       |      *========*      *========*   :
 :       +----->!COMMAND3!----->!COMMAND4!----
 :              *========*      *========*   :
 ,...........................................,

Modules have input wires along the N and W sides, and output wires
along the E side.  A side with an input wire may have at most one
input wire, but the E side may have any number of output wires.  
The semantics of the multiple output wires are discussed below.

A module has periods for its top and bottom borders and colons for its
left and right borders. The corners are formed with commas instead of
asterisks. Every module must be labeled with a name, and the name must
appear in the upper left corner of the module.

Syntax requirements:

We define the "open neighbors" of each character that can be part of a
wire as follows:

- : E and W
| : N and S
v : N
> : W
# : N,S,E and W
+ : N,S,E and W

We call an open neighbor of a wire character "filled" if the adjacent square
in that direction contains another wire character, and the current square
is in an open direction from that character.  Additionally, the W
open neighbor of -, #, and + are filled by a ! character, and the 
N open neighbor of |, # and + are filled by a = character.

For a module to be syntactically correct, each of the characters: 
-,|,v,>, and # must have all of their open neighbors filled whenever they
appear within a module.  Any + characters must have _exactly_ two of their
neighbors filled.  This means the following wire configurations are not
syntactically correct:

  |               *============*
  +-              !some command!
 -+               *============*
  |              -------+
                        |
                        |

Because in each case a + character has three filled open neighbors.

---
Evaluation
---

To execute a program, we assign a state to each wire:  each wire may
carry zero or one expression.  If a wire does not carry an expression,
it is said to be clear.  Initially, all wires are clear.  We say that
an interface has a value when the wire connected to it carries one
expression.  We call a box active when none of its input wires are
clear.  (Note that a box is immediately active if it has no input
wires).

Where a command uses an INIFACE for an expression, the expression
used is the expression carried on the wire attached to that interface.
If at any point a box makes reference to an interface to which no wire
is attached, execution halts. [XXX Could this be caught before
execution begins?  In general, can many of these run-time errors be static
instead? --djs]

A program consists of a series of modules.  Input to the program is
specified externally.  Among the modules, there must be a distinguished
module called "main."  Evaluating this module with the specified inputs
yields the output of the program.  Evaluation semantics are defined below.

Execution of a module takes place as follows:

  1.  We identify all active boxes which were not active in the last cycle.
      If there are no such boxes, execution of the module ends.  At this 
      point, the module's output is determined.  Each of the modules output
      wire's is examined.  If exactly one of these wires has a value, that
      value is the output value of the module.

  2.  Every box in this set is executed in parallel.  Execution for each 
      command is as follows:

        a.  send l
            The wire connected to the first interface is changed
            to hold the first expression, etc.  If l is empty, the
            input is simply disregarded and no output wires are changed.

        b.  case e of i1,i1
            If e is of the form Inl e1, then the state of the wire connected
            to i1 is changed to carry e1.  If e is of the form Inr e2,
            the state of the wire connected to i2 is changed to carry e2.
            Otherwise, execution ends.

        c.  proj e d to i
            If e is not of the form (e1, e2), execution ends.  Otherwise,
            if d is Left, the state of the wire connected to i is changed
            to carry e1.  If d is right, the state of the wire connected to
            i is changed to carry e2.

        d.  use s
            If there is a module named s and it has inputs along the same
            sides as the current box, then that module is fully evaluated,
            using the input values along the input wires to the use box.
            The module is evaluated just as if it were the "main" module 
            of its own program.  The output wire of the use box is set to 
            the output of the module.

  3.  When the output from the "main" module has been found, execution ends.
